# SecureApt 

from https://wiki.debian.org/SecureApt

## All about secure apt

In recent releases, Debian has been using strong crypto to validate 
downloaded packages. This is commonly called "secure apt" (or 
"apt-secure") and was implemented in Apt version 0.6 in 2003, which 
Debian migrated to in 2005. Since the documentation (here and here) is 
fairly slim on how this all works from an administrator's point of view, 
this document will try to explain in detail how secure apt works and how 
to use it.

This article discusses things at a relatively high level. For details on 
the format of the files Debian repositories please refer to the 
DebianRepository/Format page. For detailed information on commands 
please refer to the man pages of the tools.

## Basic concepts

Here are a few basic concepts that you'll need to understand for the 
rest of this document.

A secure hash function (a type of checksum) is a method of taking a file 
and boiling it down to a reasonably short number that will uniquely 
identify the content of the file, even if people are deliberately trying 
to create a pair of different files with the same checksum or create a 
new file that matches a previous checksum. APT was originally designed 
around MD5 but people have since managed to construct collisions and so 
support for newer hash functions has been added.

Public key cryptography is based on pairs of keys, a public key and a 
private key. The public key is given out to the world; the private key 
must be kept a secret. Anyone possessing the public key can encrypt a 
message so that it can only be read by someone possessing the private 
key. It's also possible to use a private key to sign a file, not encrypt 
it. If a private key is used to sign a file, then anyone who has the 
public key can check that the file was signed by that key. Anyone who 
doesn't have the private key can't forge such a signature.

These keys are quite long numbers (at least 1024 bits, i.e. 256 or more 
hex digits and preferably a lot more), and to make them easier to work 
with they have a key id, which is a shorter, 8 or 16 digit number that 
can be used to refer to them. However care should be taken with key IDs, 
especially the short 8 character ID as it is possible to generate 
collisions.

gpg is the tool used in secure apt to sign files and check their 
signatures.

apt-key is a program that is used to manage a keyring of gpg keys for 
secure apt. The keyring is kept in the file /etc/apt/trusted.gpg (not to 
be confused with the related but not very interesting 
/etc/apt/trustdb.gpg). apt-key can be used to show the keys in the 
keyring, and to add or remove a key. In more recent Debian GNU/Linux 
versions (Wheezy, for example), the keyrings are stored in specific 
files all located in the /etc/apt/trusted.gpg.d directory. For example, 
that directory could contain the following files: 
debian-archive-squeeze-automatic.gpg or 
debian-archive-wheezy-automatic.gpg. Incidentally, both files are 
provided by the debian-archive-keyring package.

## Secure apt groundwork: checksums

A Debian archive contains a Release file, which is updated each time any 
of the packages in the archive change. Among other things, the Release 
file contains some checksums of other files in the archive. An excerpt 
of an example Release file:

	MD5Sum:
	 6b05b392f792ba5a436d590c129de21f            3453 Packages
	 1356479a23edda7a69f24eb8d6f4a14b            1131 Packages.gz
	 2a5167881adc9ad1a8864f281b1eb959            1715 Sources
	 88de3533bf6e054d1799f8e49b6aed8b             658 Sources.gz

Now if we look inside a Packages file, we'll find more checksums, one 
for each package listed in it. For example:

	Package: uqm
	Priority: optional
	...
	Filename: unstable/uqm_0.4.0-1_i386.deb
	Size: 580558
	MD5sum: 864ec6157c1eea88acfef44d0f34d219

These two checksums allow apt to verify that it has downloaded a correct 
copy of the Packages file, with a checksum that matches the one in the 
Release file. And when it downloads an individual package, it can also 
check its checksum against the content of the Packages file. If apt 
fails at either of these steps, it will abort.

None of this is new in secure apt, but it does provide the foundation. 
Notice that so far there is one file that apt doesn't have a way to 
check: The Release file. Secure apt is all about making apt verify the 
Release file before it does anything else with it, and plugging this 
hole, so that there is a chain of verification from the package that you 
are going to install all the way back to the provider of the package.

## Signed Release files

To plug the hole, secure apt adds a gpg signature for the Release file. 
This is put in a file named Release.gpg that's shipped alongside the 
Release file. It looks something like this, although only gpg actually 
looks at its contents normally:

	-----BEGIN PGP SIGNATURE-----
	Version: GnuPG v1.4.1 (GNU/Linux)
	iD8DBQBCqKO1nukh8wJbxY8RAsfHAJ9hu8oGNRAl2MSmP5+z2RZb6FJ8kACfWvEx
	UBGPVc7jbHHsg78EhMBlV/U=
	=x6og
	-----END PGP SIGNATURE-----

(Technically speaking, this is an ascii-armored detached gpg signature.)

## How apt uses Release.gpg

Secure apt always downloads Release.gpg files when it's downloading 
Release files, and if it cannot download the Release.gpg, or if the 
signature is bad, it will complain, and will make note that the Packages 
files that the Release file points to, and all the packages listed 
therein, are from an untrusted source. Here's how it looks during an 
apt-get update:

	W: GPG error: http://ftp.us.debian.org testing Release: The 
	 following signatures couldn't be verified because the public key is 
	 not available: NO_PUBKEY 010908312D230C5F

Note that the second half of the long number is the key id of the key 
that apt doesn't know about, in this case that's 2D230C5F.

If you ignore that warning and try to install a package later, apt will 
warn again:

	WARNING: The following packages cannot be authenticated!
	  libglib-perl libgtk2-perl
	Install these packages without verification [y/N]?

If you say Y here you have no way to know if the file you're getting is 
the package you're supposed to install, or if it's something else 
entirely that a black hat has arranged for you, containing a nasty 
surprise.

Note that you can disable these checks by running apt with 
--allow-unauthenticated.

It's also worth noting that newer versions of the Debian installer use 
the same signed Release file mechanism during their debootstrap of the 
Debian base system, before apt is available, and that the installer even 
uses this system to verify pieces of itself that it downloads from the 
net. Also, Debian does not currently sign the Release files on its CDs; 
apt can be configured to always trust packages from CDs so this is not a 
large problem.

## How to tell apt what to trust

So the security of the whole system depends on there being a Release.gpg 
file, which signs a Release file, and of apt checking that signature 
using gpg. To check the signature, it has to know the public key of the 
person who signed the file. These keys are kept in apt's own keyring 
(/etc/apt/trusted.gpg), and managing the keys is where secure apt comes 
in.

By default, Debian systems come preconfigured with the Debian archive 
key in the keyring.

	joey@dragon:~>sudo apt-key list
	/etc/apt/trusted.gpg
	--------------------
	pub   4096R/55BE302B 2009-01-27 [verf√§llt: 2012-12-31]
	uid   Debian Archive Automatic Signing Key (5.0/lenny) <ftpmaster@debian.org>

Here 55BE302B is the key id, and notice that this key is only valid for 
a limited period. Debian occasionally rotates these keys as a last line 
of defense against some sort of security breach breaking a key.

That will make apt trust the official Debian archive, but if you add 
some other apt repository to /etc/apt/sources.list, you'll also have to 
give apt its key if you want apt to trust it. Once you have the key and 
have verified it, it's a simple matter of "apt-key add file" to add it. 
Getting the key and verifying it are the trickier part.

## How to find and add a key

The debian-archive-keyring package is used to distribute keys to apt. 
Upgrades to this package can add (or remove) gpg keys for the main 
Debian archive.

For other archives, there is not yet a standard location where you can 
find the key for a given apt repository. There's a rough standard of 
putting the key up on the web page for the repository or as a file in 
the repository itself, but no real standard, so you might have to hunt 
for it.

The current and the retired Debian archive "signing" keys are available 
from https://ftp-master.debian.org/keys.html.

gpg itself has a standard way to distribute keys, using a keyserver that 
gpg can download a key from and add it to its keyring. For example:

	joerg@vorlon:~>gpg --keyserver subkeys.pgp.net --recv-keys 55BE302B
	gpg: requesting key 55BE302B from hkp server subkeys.pgp.net
	gpg: key 55BE302B: public key "Debian Archive Automatic Signing Key 
		(5.0/lenny) <ftpmaster@debian.org>" imported
	gpg: Total number processed: 1
	gpg:               imported: 1  (RSA: 1)

You can then export that key from your own keyring and feed it to 
apt-key:

	joey@dragon:~>gpg -a --export 55BE302B | sudo apt-key add -
	gpg: no ultimately trusted keys found
	OK

(What does the "gpg: no ultimately trusted keys found" warning mean? --> 
The Warning: "no ultimately trusted keys found" means that gpg was not 
configured to ultimately trust a specific key. Trust settings are part 
of OpenPGPs Web-of-Trust which does not apply here. So there is no 
problem with this warning. In usual setups the users own key is 
ultimately trusted.)

## How to tell if the key is safe

By adding a key to apt's keyring, you're telling apt to trust everything 
signed by the key, and this lets you know for sure that apt won't 
install anything not signed by the person who possesses the private key. 
But if you're sufficiently paranoid, you can see that this just pushes 
things up a level, now instead of having to worry if a package, or a 
Release file is valid, you can worry about whether you've actually 
gotten the right key. Is the information on 
http://ftp-master.debian.org/keys.html mentioned above correct or is 
this all some clever trap?

It's good to be paranoid in security, but verifying things from here is 
harder. gpg has the concept of a chain of trust, which can start at 
someone you're sure of, who signs someone's key, who signs some other 
key, etc., until you get to the archive key. If you're sufficiently 
paranoid you'll want to check that your archive key is signed by a key 
that you can trust, with a trust chain that goes back to someone you 
know personally. If you want to do this, visit a Debian conference or 
perhaps a local LUG for a key signing.

(Note: Not all apt repository keys are signed at all by another key. 
Maybe the person setting up the repository doesn't have another key, or 
maybe they don't feel comfortable signing such a role key with their 
main key.)

If you can't afford this level of paranoia, do whatever feels 
appropriate to you when adding a new apt source and a new key. Maybe 
you'll want to mail the person providing the key and verify it, or maybe 
you're willing to take your chances with downloading it and assuming you 
got the real thing. The important thing is that by reducing the problem 
to what archive keys to trust, secure apt lets you be as careful and 
secure as it suits you to be.

Here's a blog post with a procedure to verify the key's integrity. See 
also Securing Debian, Ch7.

## Debian archive key expiry

Since secure apt was introduced, the keys used to sign the main Debian 
archive have changed a couple of times. Since secure apt is young, we 
don't have a great deal of experience with changing the key and there 
are still rough spots.

In January 2006, a new key for 2006 was made and the Release file began 
to be signed by it, but to try to avoid breaking systems that had the 
old 2005 key, the Release file was signed by that as well. The intent 
was that apt would accept one signature or the other depending on the 
key it had, but apt turned out to be buggy and refused to trust the file 
unless it had both keys and was able to check both signatures. This was 
fixed in apt version 0.6.43.1. There was also confusion about how the 
key was distributed to users who already had systems using secure apt; 
initially it was uploaded to the web site with no announcement and no 
real way to verify it and users were forced to download it by hand. This 
was fixed by the introduction of the debian-archive-keyring package, 
which manages apt keyring updates.

In late 2006, a new key was created that will be used to sign the 
archive for the lifetime of the Debian 4.0 release (until 2009-07-01). 
The archive began to be signed by this new key in addition to the yearly 
signing key for 2006. That was a bit confusing, because the key began to 
be used before it was announced and before debian-archive-keyring was 
updated to include it! Apt's warning message in this situation is 
slightly opaque to end users. There's obviously still room for 
improvement in how we roll out new keys. This new key does answer the 
question of how users of the 4.0 (etch) release will be able to validate 
their software for the lifetime of that release. This new key is also 
being used to sign other versions of Debian (like unstable).

On February 7th 2007, the 2006 key expired. Currently the only known 
breakage of this is that it broke rc1 of the etch installer, since the 
installer images only know about the 2006 key. Daily builds of the 
installer have the 2007 key and continue to work.

Most recently, a new Etch stable release key has been added. This key is 
an offline key that will be used to sign releases of Etch (including 
point releases).

## How to manually check for package's integrity

There are sometimes you want to manually check that a package hasn't 
been tampered since the time it was uploaded to the archive and the time 
you downloaded it. The apt system will take care of this procedure 
automatically, but in this section we will describe how to perform these 
safety tests manually.

First, we're assuming you have downloaded the Release information from a 
trusted source (official Debian servers and mirrors). You'll need to 
check the Release file as the first step, for that you'll use the 
signature Release.gpg file, as in the following example.

Note: You will have to import the public key for the archive, if it 
isn't in your keyring; and use your current distribution instead of 
"sid".

    cd /var/lib/apt/lists
    gpgv --keyring /etc/apt/trusted.gpg \
		ftp.us.debian.org_debian_dists_sid_Release.gpg \
    	ftp.us.debian.org_debian_dists_sid_Release

After that you check the md5sums of the Packages file for each of the 
components. For example:

    # Print the md5sum of the Packages file which is listed in the 
    # Release file.
    sed -n "s,main/binary-i386/Packages$,,p" \
		ftp.us.debian.org_debian_dists_sid_Release 
    # Print the md5sum of the Packages file itself.
    md5sum ftp.us.debian.org_debian_dists_sid_main_binary-i386_Packages                 

Finally, we check the MD5 or SHA checksum of the package itself.

	# Grab the checksum from the APT cache.
	apt-cache show <package_name> | sed -n "s/MD5sum: //p" 
	# Compare it against the binary package's checksum.
	md5sum <binary_package_name>.deb                       

This section is far from complete, but we expect is a good introductory 
material for digging into the Debian packages' trust chain.

TODO: Add signature verification: dscverify quick introduction.

## Other problems

One not so obvious gotcha is that if your clock is very far off, secure 
apt will not work. If it's set to a date in the past, such as 1999, apt 
will fail with an unhelpful message such as this:

      W: GPG error: http://archive.progeny.com sid Release: Unknown 
      error executing gpg

Although apt-key list will make the problem plain:

    gpg: key 2D230C5F was created 192324901 seconds in the future (time 
    warp or clock problem)
    gpg: key 2D230C5F was created 192324901 seconds in the future (time 
    warp or clock problem)
    pub   1024D/2D230C5F 2006-01-03
    uid  Debian Archive Automatic Signing Key (2006) <ftpmaster@debian.org>

If it's set to a date too far in the future, apt will treat the keys as 
expired. Another problem you may encounter if using testing or unstable 
is that if you have not run apt-get update lately and apt-get install a 
package, apt might complain that it cannot be authenticated (why does it 
do this?). apt-get update will fix this. If apt gives a warning like 
this:

    W: There are no public key available for the following key IDs:
    A70DAF536070D3A1

This means that the archive has begun to be signed by a new key, which 
your system does not know about. In this example, the new key is a 
dedicated key that will be used to sign the release of Debian 4.0. Since 
the archive was still signed by another key that apt knows about, this 
is just a warning, and once the system is fed the new key (by upgrading 
the debian-archive-keyring package), the warning will go away.

If you have the debsig-verify package installed, you might run into 
errors like this one:

    dpkg: error
    processing /var/cache/apt/archives/anjuta-common_1.2.4a-2_all.deb (--unpack):
     Verification on package /var/cache/apt/archives/anjuta-common_1.2.4a-2_all.deb failed!
    Authenticating /var/cache/apt/archives/anjuta_1.2.4a-2_i386.deb ...
    debsig: Origin Signature check failed. This deb might not be signed.

This actually has nothing to do with secure apt. debsig-verify checks 
for signatures embedded inside individual Debian packages. Since such 
signatures are not widely used (we use secure apt instead), it doesn't 
work very well to install this, and removing the debsig-verify package 
will fix the problem.

If apt-get update outputs this

    W: GPG error: http://non-us.debian.org stable/non-US Release: The 
    following signatures couldn't be verified because the public key is 
    not available: NO_PUBKEY F1D53D8C4F368D5D

    W: You may want to run apt-get update to correct these problems

    remove non-us from /etc/apt/sources. 

## Setting up a secure apt repository

From man apt-secure

If you want to provide archive signatures in an archive under your 
maintenance you have to:

    Create a toplevel Release file. if it does not exist already. You 
    can do this by running apt-ftparchive release (provided inftp 
    apt-utils). Sign it. You can do this by running gpg -abs -o 
    Release.gpg Release. Publish the key fingerprint, that way your 
    users will know what key they need to import in order to 
    authenticate the files in the archive.

Whenever the contents of the archive changes (new packages are added or 
removed) the archive maintainer has to follow the first two steps 
previously outlined.

## Failed updates and missing keys

Don't be surprised if you attempt to apt-get upgrade and things do not 
work as expected. Additionally, trying to resolve the missing key with 
procedures on this page will fail too. If you encounter the issues, 
please file a bug report.

Below is a typical set of failures you will encounter using Debian Hurd 
as an example. Many ports fail the same way.

	$ sudo apt-get update
	Hit http://snapshot.debian.org sid InRelease
	Get:1 http://ftp.debian-ports.org unreleased InRelease [32.8 kB]
	Get:2 http://snapshot.debian.org sid/main Sources/DiffIndex [7876 B]
	Ign http://ftp.debian-ports.org unreleased InRelease
	Get:3 http://snapshot.debian.org sid/main hurd-i386 Packages/DiffIndex [7876 B]
	Ign http://ftp.debian-ports.org unreleased/main Sources/DiffIndex
	Get:4 http://snapshot.debian.org sid/main Translation-en/DiffIndex [7876 B]
	Ign http://ftp.debian-ports.org unreleased/main hurd-i386 Packages/DiffIndex
	Err http://ftp.debian-ports.org unreleased/main Sources
	Err http://ftp.debian-ports.org unreleased/main hurd-i386 Packages
	Err http://ftp.debian-ports.org unreleased/main Sources
	Err http://ftp.debian-ports.org unreleased/main hurd-i386 Packages
	Err http://ftp.debian-ports.org unreleased/main Sources
	Err http://ftp.debian-ports.org unreleased/main hurd-i386 Packages
	Hit http://ftp.debian-ports.org unreleased/main Sources
	Hit http://ftp.debian-ports.org unreleased/main hurd-i386 Packages
	Ign http://ftp.debian-ports.org unreleased/main Translation-en
	Fetched 56.4 kB in 5s (10.4 kB/s)
	Reading package lists...
	W: GPG error: http://ftp.debian-ports.org unreleased InRelease: The 
	following signatures couldn't be verified because the public key is 
	not available: NO_PUBKEY B4C86482705A2CE1


	$ sudo apt-get install debian-ports-archive-keyring
	Reading package lists... Done
	Building dependency tree       
	Reading state information... Done
	debian-ports-archive-keyring is already the newest version.
	0 upgraded, 0 newly installed, 0 to remove and 8 not upgraded.


	$ gpg --keyserver subkeys.pgp.net --recv-keys B4C86482705A2CE1
	gpg: WARNING: using insecure memory!
	gpg: please see http://www.gnupg.org/documentation/faqs.html for more information
	gpg: requesting key 705A2CE1 from hkp server subkeys.pgp.net
	gpg: keyserver timed out
	gpg: keyserver receive failed: keyserver error


	$ sudo apt-key update gpg: key B98321F9: "Squeeze Stable Release Key 
	<debian-release@lists.debian.org>" not changed
	gpg: key 473041FA: "Debian Archive Automatic Signing Key 
	(6.0/squeeze) <ftpmaster@debian.org>" not changed
	gpg: key 65FFB764: "Wheezy Stable Release Key 
	<debian-release@lists.debian.org>" not changed
	gpg: key 46925553: "Debian Archive Automatic Signing Key 
	(7.0/wheezy) <ftpmaster@debian.org>" not changed
	gpg: key 518E17E1: "Jessie Stable Release Key 
	<debian-release@lists.debian.org>" not changed
	gpg: key 2B90D010: "Debian Archive Automatic Signing Key (8/jessie) 
	<ftpmaster@debian.org>" not changed
	gpg: key C857C906: "Debian Security Archive Automatic Signing Key 
	(8/jessie) <ftpmaster@debian.org>" not changed
	gpg: Total number processed: 7
	gpg:              unchanged: 7



