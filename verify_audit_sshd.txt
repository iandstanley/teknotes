



		   VERIFY AND AUDIT SSHD CONFIG




			 TEST CONFIG FILE

Test the syntax of the config file:

	# sshd -t -f /etc/ssh/sshd_config



			  VERIFY ACCESS

We can verify access, and list out the configuration that would be
in effect:


	# sshd -T -C host=localhost -f /etc/ssh/sshd_config


The -C tells the test (-T) which kind of client you are going to
be connecting from.

If the test matches and will allow access, the configuration (that
would be in effect) is output to the terminal (for that connection).

If you specify another hostname that isn't allowed then all the
options to connect will show 'no'.

This allows us to tets different scenarios eg. use publickey locally
on the LAN, and an alternate method from the WAN (or an additional
method).

This is a fantastic way of testing your configuration specifically
for matches, to make sure everything is working correctly.

There is a lot to say about what is a good choice for each of the
options. There are a couple of tools that can help you with this:


	* the LYNIS security scanner (performs some basic checks)

	* SSH-AUDIT will audit the crypto

	* OPENSCAP has more capabilities but is a little harder to
	setup. The main advantage of OpenSCAP is that it is directly
	tied to the NIST standards


Ssh-audit will audit the crypto on your system and generates a
report. Ssh-audit doesn't really know (as of 2020) about SSH
certificates.





			      CRYPTO


I mostly rely on the NIST standard and https://stribika.github.io

NIST Standard:

* Use modern crypto provided by OpenSSH

	- for internal servers, specify only a SINGLE ALGORITHM for
	  each of the options

	- guard against degrading to unsafe algorithms

	- specify configuration for both client & server algorithms

* Recommended Algorithms

	key exchange (KEX)      curve25519-sha256@libssh.org

	encryption (cipher)     chacha20-poly1305@openssh.com

	message authentication  hmac-sha2-512etm@openssh.com code
	(MAC)

	host and user key       ssh-ed25519-certs-v01@openssh.com


Since OpenSSH v8.0, experimental support for KEX quantum-resistant
algorithm with sntrup4591761x25519-sha512@tinyssh.org.





			  AUTHENTICATION


Although it is hard to get statistics, Authentication is usually
the most prevalent mode of attack vectors.  One company had been
compromised 4 times in 25 years; and they had always traced it to
ssh, and it was always an authentication problem.  The most common
issue is people that had unaudited keys, OR people that had put
their PUBLIC *AND* PRIVATE keys on the server.

There are a whole slew of authentication algorithms you can use.
The ones that are most common are:

	* KbdInteractiveAuthentication and PasswordAuthentication

	* PubkeyAuthentication

	* Certificate based PubkeyAuthentication

	* FIDO based PubkeyAuthentication


If you know a bit more, you would be generally drop KbdInteractive
and Password authentication modes, and move to publickey authentication.
Public key authentication is easier to use and argueably more secure.

I recommend certificate based publickey authentication which gets
layered on top of public key.

And then there is the brand new FIDO based publickey authentication.




			 VULNERABILITIES


Vulnerabilities based upon distribution and management of credentials.


		Use OpenSSH certificates for BOTH
		   host and user authentication


	* available since OpenSSH v5.4

	* Much simpler and lighter weight than X.509 certificates

	* Provides identity, lifetime and other features

	* Eliminates the need to distribute any credentials to
	servers

	* Eliminates man-in-the-middle attacks

	* Works for both host and user keys


Despite being around for a very long time they are not very well
known. And it;s simpler than your web-based X509 certificates: you
don't have a certificate authority.


And OpenSSH provides a number of really nice features:

	* They help identify the person

	* You can control the lifetime of a certificate

	* You can control what you can do with that certificate


Because you no longer need to distribute keys to servers, you don't
have to rename them, or keep track of them. And you can age these
certificates out. As we create certificates for both the user and
the host it eliminates the man-in-the-middle attack.

The host certificates assure the user which server are you really
connecting to.



	     COMPONENTS OF CERTIFICATE INFRASTRUCTURE


	* Create a certificate authority (CA) key to sign all
	  certificates

	* Distribute this CA key to all servers in /etc/ssh/ca_keys

	* Create certificates for each user and host

	* Optionally, create a certificate revocation file (Recommended
	  but isn't strictly needed, because old certificates age
	  out).




Example:

	$ ssh-keygen -L -f .ssh/id_rsa-cert.pub

	.ssh/id_rsa-cert.pub

		Type            ................. user certificate
		Public key:     ..................  Signing CA:
		ED25519 ...................  Key ID:
		"jplejacq@quoininc.com" Serial:         205 Valid:
		from ........ to ........  Principals:
			jplejacq
		Critical options:       (none) Extensions
			permit-X11-forwarding permit-port-forwarding
			permit-pty permit-user-rc



The certificate is always a .pub file.

'Principals' is interesting as you can do a lot of automation in
terms of login. So the principall is usually your user id.

Critical options are capabilities that you can put in. For example,
what commands can they execute.

There are a whole bunch of extensions. In this example I have not
enabled agent forwarding.



Some features:

	* You no longer need a known_hosts file for your servers

	* Certificates can restrict the source, the commands that
	can be executed, and the features available

	* Time scoped to limit exposure of lost keys or certificates

	* Use critical options to limit exposure for service to
	service remote access

	* Establish management policies and procedures for renewing
	and revoking certificates.




	$ cd .ssh

	$ ls -p config          config.d/       id_rsa-cert.pub


Normally, I would have a public key and a private key here. But I'm
actually saving those on a Yubikey.


	$ sudo cat /etc/ssh/ssh_known_hosts

Contains the line:

@cert-authority  *.quoininc.com  ssh-ed25519 .........  ca@quoininc.com




		     HARDWARE SECURITY TOKEN


OpenSSH can use a private key stored on an OpenPGP card.

	* Modern GNUPG gpg-agent provides most capabilities

	* The GNUPG authentication subkey used as an OpenSSH
	authentication key

	* Both public and private keys are stored on the device

	* CERTIFICATES ARE NOT YET SUPPORTED!!!

	* Significantly reduces the risk of compromised ssh keys



Certificates are not yet supported. So there are a few limitations
that's easily worked around.


They are incredibly easy to use and setup:


	* Provision a set of GNUPG keys to the hardware token

	* Configure gpg-agent to emulate ssh-agent (this is the
	default for Debian)

	* Extract publickey to create a certificate and/or distribute
	to servers



Takeaway:

	Use a hardware security key for your private ssh keys.



SSH will reuse the authentication subkey for itself for ssh.


	$ ssh-add -l .........  .........  .........





			    REFERENCES


	* OpenSSH project       openssh.com

	* NISTTR 7966   Security of Interactive Access Management
	  Using Secure Shell

		nvlpubs.nist.gov/nistpubs/ir/2015/NIST.IR.7966.pdf

	* NIST Common Vulnerabilities and Exposures (CVE) related
	  to OpenSSH

		cve.mitre.org/cgi-bin/cvekey.cgi?keyword=openssh

	* Secure Shell

		stribika.github.io/2015/01/04/secure-secure-shell.html

		One of the few understandable sites describing a
		rational for selecting a particular set of cryptographic
		options. A bit dated but still a good read.

	* Mozilla OpenSSH Guidelines

		* infosec.mozilla.org/guidelines/openssh




