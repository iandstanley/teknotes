


                  ASYNCHRONOUS VS SYNCHRONOUS IO



	--------------------------------------------------------------


SYNCIO.C	

	/* synchronous I/O (traditional I/O) */

	#include <stdio.h>
	#include <stdlib.h>
	#include <errno.h>
	
	#define BUFSIZE 25000

	int main (int argc, char ** argv) {

		int ret;

		FILE *fp;

		if (argc < 2) {

			printf("Usage: %s <filename>\n", argv[0]);

			return EXIT_FAILURE;

		}

		fp = fopen (argv[1], "r");

		if (fp == NULL) {

			perror("fopen");

			return EXIT_FAILURE;

		}

		char buf[BUFSIZE];

		ret = fread(buf, sizeof(char), BUFSIZE, fp);

		fclose(fp);

		if (ret > 0) {

			printf("Got %d bytes\n", ret);

		}
	}



	--------------------------------------------------------------


ASYNC.IO


	/* asynchronous I/O */

	#include <stdio.h>
	#include <aio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <errno.h>
	#include <stdint.h>

	#define BUFSIZE 25000

	struct aicb* async_read(FILE *fp, char *buf, int bytes) {

		struct aiocb *aio = malloc(sizeof(struct aiocb));

		if (aio == NULL) {

			return NULL; 

			/* prob do better error handling */

		}

		memset(aio, 0, sizeof(*aio));	
		/* or use calloc */

		aio->aio_buf = buf;

		aio->aio_fildes = fileno(fp); 
		/* using file descriptor not ptr */

		aio->aio_nbytes = bytes;

		aio->aio_offset = 0;

		int result = aio_read(aio);

		if (result < 0) {

			/* some error */

			free(aio);

			return NULL;

		}

		return aio;

	}

	int main (int argc, char **argv) {

		int ret;

		FILE *fp;

		if (argc < 2) {

			printf("Usage: %s <filename>\n", argv[0]);

			return EXIT_FAILURE;

		}

		fp = fopen(argv[1], "r");

		if (fp == NULL) {

			perror("fopen");

			return EXIT_FAILURE;

		}

		char buf[BUFSIZE];

		/* ret = fread(buf, sizeof(char), BUFSIZE,fp); */

		/* we will need an asynchronous I/O control block aiocb */

		struct aicb* aio = async_read(fp, buf, BUFSIZE);

		uint64_t counter = 0;

		while (aio_error(aio) == EINPROGRESS) {
			counter ++; 
		}

		ret = aio_return(aio);

		fclose(fp);

		printf("While we were waiting, we counted up to %lu times\n", counter);

		if (ret > 0) {

			printf("Got %d bytes\n", ret);

		} else {

			printf("READ FAILED");

		}
	}



	--------------------------------------------------------------


MAKEFILE


	CC=clang
	CFLAGS=-g
	BINS=aync sync

	all: $(BINS)

	%: %.c
		$(CC) $(CFLAGS) -o $@ $^ -lrt

	clean:
		rm -f *.DSYM $(BINS)



	--------------------------------------------------------------


	$ make

	$ ./sync async.c

	Got 1283 bytes

	$ ./async async.c

	While we were reading, we counted up 6108 times.
	Got 1283 bytes
	$ 


Note how much processed we managed to do during waiting times on I/O.














