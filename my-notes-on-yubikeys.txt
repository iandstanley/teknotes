



                  NOTES TO MYSELF ABOUT YUBIKEYS




There are 4 ways to use a Yubikey as an SSH key:


	Yubikey's ssh applet directly

	OpenPGP         fairly reliable, and can even be used
			from an android phone using TermBot. Gpg-agent
			needs to be used instead of ssh-agent.


	FIDO            As of OpenSSH 8.2, "security key" keys are
			also supported. These are suffixed with
			"sk" and require server support. Their
			implementation effectively ensures 2FA.

	PIV		Using a custom PKCS11 extension for ssh-agent


	--------------------------------------------------------------


INTEROPERABILITY


OpenPGP keys are accessed through an emulated CCID interface. If
you are using GPG anyway, it makes sense to make an RSA2048 key on
your Yubikey. FIDO keys aren't quite there yet in terms of support
- even Centos 8 doesn't include a version of OpenSSH 8.2+.

An ECDSA PIV key can be accessed both via PKCS11 or the OpenPGP API
interface, which may make them one of the better choices.



GENERATING KEYS


1. OpenPGP


	$ gpg --card-edit

	gpg/card> key-attr

	...

		(1) RSA
		(2) ECC

	? 1

	keysize (2048):	4096

	gpg/card>  generate



2. FIDO2


	$ ssh-keygen -t ed25519-sk
	...



3. PIV 


	$ ykman piv keys generate -a ECCP384  \
		--touch-policy never 9a public.pem

	$ ykman piv certificates generate -s "SSH key"  \
		-d $9(365*5)) -a SHA512 9a public.pem

You can set the touch policy to always if you want, but this will
get annoying if you are running things lke Ansible playbooks across
a number of hosts.



	--------------------------------------------------------------



USING THE KEYS


In order to allow me to easily switch between gpg-agent and ssh-agent, you could add the following to your .bashrc:



	--------------------------------------------------------------

	function g() {

		# this function overloads the SSH_AUTH_SOCK, setting
		# it to use gpg-agent rather than the default ssh-agent

		SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket) $@
	}

	# XFCE starts an ssh-agent automatically, with it address
	# in /tmp but for some reason this prevents PIV PKCS11
	# plugins from being loaded.


	[ ! -S $HOME/.ssh/ssh-agent ] && eval $(ssh-agent \
		-a $HOME/.ssh/ssh-agent)

	export SSH_AUTH_SOCK=$HOME/.ssh/ssh-agent

	function piv() {
		ssh-add -e /usr/lib64/libykcs11.so 2>/dev/null
		ssh-add -s /usr/lib64/libykcs11.so 
	}

	gpgconf --launch gpg-agent

	--------------------------------------------------------------



FIDO2 SSH KEYS


If you have decided to use FIDO, you can pull those keys in with:

	$ ssh-add -K



